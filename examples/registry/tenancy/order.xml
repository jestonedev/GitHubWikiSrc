<?xml version="1.0" encoding="utf-8"?>
<activity>
  <plugins>
    <include>ConvertModule.dll</include>
    <include>IOModule.dll</include>
    <include>JSModule.dll</include>
    <include>ReportModule.dll</include>
    <include>SqlDataSource.dll</include>
  </plugins>
  <language>ru</language>
  <step plugin="SqlDataSource" action="SqlSetConnectionString" repeat="1">
    <input>
      <parameter name="connectionString">[connectionString]</parameter>
    </input>
  </step>
  <step plugin="SqlDataSource" action="SqlOpenConnection" repeat="1" />
  <step plugin="SqlDataSource" action="SqlSelectTable" repeat="1">
    <input>
      <parameter name="query">SELECT @i := @i + 1 AS number, v.tenant, v.rent_address, v.persons, v.total_area, v.rent_period
FROM (
SELECT tp.registration_num, DATE_FORMAT(tp.registration_date,'%d.%m.%Y') AS registration_date, v.rent_address, tenants.tenant,
  persons.persons, v.total_area, v.living_area, rt.rent_type_short, 
  IF(tp.begin_date IS NULL AND tp.end_date IS NULL, NULL,
  IF(tp.begin_date IS NULL,CONCAT('по ',DATE_FORMAT(tp.end_date,'%d.%m.%Y')),
  IF(tp.end_date IS NULL,CONCAT('с ',DATE_FORMAT(tp.begin_date,'%d.%m.%Y')),
  CONCAT('с ',DATE_FORMAT(tp.begin_date,'%d.%m.%Y'),' по ',DATE_FORMAT(tp.end_date,'%d.%m.%Y'))))) AS rent_period
FROM tenancy_processes tp
  INNER JOIN rent_types rt ON tp.id_rent_type = rt.id_rent_type
  LEFT JOIN (
  SELECT tp.id_process, CONCAT(tp.surname,' ',tp.`name`, IF(tp.patronymic IS NULL,'',CONCAT(' ',tp.patronymic))) AS tenant
  FROM tenancy_persons tp
  WHERE tp.id_kinship = 1 AND tp.deleted &lt;&gt; 1 AND tp.exclude_date IS NULL
  GROUP BY tp.id_process
  ) tenants ON tp.id_process = tenants.id_process
  LEFT JOIN (
  SELECT tp.id_process, GROUP_CONCAT(
    CONCAT(tp.surname,' ',tp.`name`, IF(tp.patronymic IS NULL,'',CONCAT(' ',tp.patronymic)), IF(k.kinship IS NULL,'', CONCAT(', ', 
	IF(k.id_kinship = 64,'',k.kinship)))) SEPARATOR '$br$') AS persons
  FROM tenancy_persons tp
    LEFT JOIN kinships k ON tp.id_kinship = k.id_kinship
  WHERE tp.id_kinship &lt;&gt; 1 AND tp.deleted &lt;&gt; 1 AND tp.exclude_date IS NULL
  GROUP BY tp.id_process
  ) persons ON persons.id_process = tp.id_process
  LEFT JOIN (
SELECT v.id_process, 
  v.id_street, v.house, v.premises_num, v.sub_premises_num,
  GROUP_CONCAT(v.rent_address SEPARATOR ', ') AS rent_address,
  SUM(v.total_area) AS total_area, 
  SUM(v.living_area) AS living_area
FROM (
SELECT tba.id_process, tba.id_building,
  vks.id_street, b.house, NULL AS premises_num, NULL AS sub_premises_num,
  CONCAT(REPLACE(vks.street_name,'жилрайон.', 'жилой район'),', д. ', b.house) AS rent_address,
  SUM(IF(tba.rent_total_area IS NOT NULL,tba.rent_total_area, b.total_area)) AS total_area,
  SUM(IF(tba.rent_living_area IS NOT NULL,tba.rent_living_area, b.living_area)) AS living_area
FROM tenancy_buildings_assoc tba
  INNER JOIN buildings b ON tba.id_building = b.id_building
  INNER JOIN v_kladr_streets vks ON b.id_street = vks.id_street
WHERE tba.deleted &lt;&gt; 1
GROUP BY tba.id_process, tba.id_building
UNION ALL
SELECT tpa.id_process, b.id_building,
  vks.id_street, b.house, p.premises_num, NULL AS sub_premises_num,
  CONCAT(REPLACE(vks.street_name,'жилрайон.', 'жилой район'),', д. ', b.house,', ',
    GROUP_CONCAT(IF(p.premises_num IS NULL,NULL,
      CONCAT(pt.premises_type_short,' ', p.premises_num)) SEPARATOR ', ')
  ) AS rent_address,
  SUM(IF(tpa.rent_total_area IS NOT NULL,tpa.rent_total_area, p.total_area)) AS total_area,
  SUM(IF(tpa.rent_living_area IS NOT NULL,tpa.rent_living_area, p.living_area)) AS living_area
FROM tenancy_premises_assoc tpa
  INNER JOIN premises p ON tpa.id_premises = p.id_premises
  INNER JOIN buildings b ON p.id_building = b.id_building
  INNER JOIN v_kladr_streets vks ON b.id_street = vks.id_street
  INNER JOIN premises_types pt ON p.id_premises_type = pt.id_premises_type
WHERE tpa.deleted &lt;&gt; 1
GROUP BY tpa.id_process, b.id_building
UNION ALL
SELECT v.id_process, v.id_building, 
  v.id_street, v.house, v.premises_num, v.sub_premises_num,
  CONCAT(REPLACE(v.street_name,'жилрайон.', 'жилой район'),', д. ', v.house,', ',
    GROUP_CONCAT(IF(v.premises_num_gc IS NULL,NULL, v.premises_num_gc) SEPARATOR ', ')
  ) AS rent_address,
  SUM(v.total_area) AS total_area,
  SUM(v.living_area) AS living_area
FROM (
SELECT tspa.id_process, b.id_building,
  vks.street_name,
  vks.id_street, b.house, p.premises_num, sp.sub_premises_num,
  CONCAT(
    IF(p.premises_num IS NULL,'',CONCAT(pt.premises_type_short,' ', p.premises_num)),', ',
    GROUP_CONCAT(IF(sp.sub_premises_num IS NULL,NULL,CONCAT('ком. ', sp.sub_premises_num)) SEPARATOR ', ')) AS premises_num_gc,
  SUM(IF(tspa.rent_total_area IS NOT NULL,tspa.rent_total_area, sp.total_area)) AS total_area,
  SUM(IF(tspa.rent_total_area IS NOT NULL,tspa.rent_total_area, sp.total_area)) AS living_area 
FROM tenancy_sub_premises_assoc tspa
  INNER JOIN sub_premises sp ON tspa.id_sub_premises = sp.id_sub_premises
  INNER JOIN premises p ON sp.id_premises = p.id_premises
  INNER JOIN buildings b ON p.id_building = b.id_building
  INNER JOIN v_kladr_streets vks ON b.id_street = vks.id_street
  INNER JOIN premises_types pt ON p.id_premises_type = pt.id_premises_type
WHERE tspa.deleted &lt;&gt; 1
GROUP BY tspa.id_process, p.id_premises) v
GROUP BY v.id_process, v.id_building) v
GROUP BY v.id_process) v ON tp.id_process = v.id_process
WHERE tp.deleted &lt;&gt; 1 AND tp.id_rent_type = [id_rent_type] AND (tp.registration_date BETWEEN STR_TO_DATE('[registration_date_from]','%d.%m.%Y') AND STR_TO_DATE('[registration_date_to]','%d.%m.%Y'))) v, (SELECT @i := 0) vars</parameter>
    </input>
    <output>
      <parameter name="table">tenancy_processes</parameter>
    </output>
  </step>
  <step plugin="SqlDataSource" action="SqlSelectTable" repeat="1">
    <input>
      <parameter name="query">SELECT CONCAT(chairman.surname, ' ', chairman.`name`, 
  IF(chairman.patronymic IS NULL, '', CONCAT(' ', chairman.patronymic))) AS chairman_snp,
  chairman.post AS chairman_post, 
  CONCAT(head_housing_dep.surname, ' ', head_housing_dep.`name`, 
  IF(head_housing_dep.patronymic IS NULL, '', CONCAT(' ', head_housing_dep.patronymic))) AS head_housing_dep_snp,
  CONCAT(head_housing_dep.surname, ' ', head_housing_dep.`name`, 
  IF(head_housing_dep.patronymic IS NULL, '', CONCAT(' ', head_housing_dep.patronymic))) AS head_housing_dep_surname_dative,
  head_housing_dep.post AS head_housing_dep_post,
  CONCAT(head_legal_dep.surname, ' ', head_legal_dep.`name`, 
  IF(head_legal_dep.patronymic IS NULL, '', CONCAT(' ', head_legal_dep.patronymic))) AS head_legal_dep_snp,
  head_legal_dep.post AS head_legal_dep_post,
  executor.executor_name AS executor_snp,
  executor.phone AS executor_phone,
  snp_template.snp_template
FROM (
SELECT h.*, cw.chairman_warrant
FROM history_chairmans h
  INNER JOIN chairman_warrants cw ON h.id_chairman_warrant = cw.id_chairman_warrant
WHERE start_date =
(SELECT MAX(start_date) AS max_date
FROM history_chairmans
WHERE start_date &lt; STR_TO_DATE('[order_date_from]','%d.%m.%Y'))
LIMIT 1) chairman
JOIN (
SELECT *
FROM history_head_housing_dep
WHERE start_date =
(SELECT MAX(start_date) AS max_date
FROM history_head_housing_dep
WHERE start_date &lt; STR_TO_DATE('[order_date_from]','%d.%m.%Y'))
LIMIT 1) head_housing_dep
JOIN (
SELECT *
FROM history_head_legal_dep
WHERE start_date =
(SELECT MAX(start_date) AS max_date
FROM history_head_legal_dep
WHERE start_date &lt; STR_TO_DATE('[order_date_from]','%d.%m.%Y'))
LIMIT 1) head_legal_dep
JOIN (
SELECT *
FROM history_sign_doc_snp_templates
WHERE start_date =
(SELECT MAX(start_date) AS max_date
FROM history_sign_doc_snp_templates
WHERE start_date &lt; STR_TO_DATE('[order_date_from]','%d.%m.%Y'))
LIMIT 1) snp_template
JOIN (
  SELECT *
  FROM executors e
  WHERE e.id_executor = [id_executor]) executor</parameter>
    </input>
    <output>
      <parameter name="table">signers</parameter>
    </output>
  </step>
  <step plugin="SqlDataSource" action="SqlCloseConnection" repeat="1" />
  <step plugin="ConvertModule" action="GetRow" repeat="1">
    <input>
      <parameter name="table">[signers]</parameter>
      <parameter name="rowNumber">0</parameter>
    </input>
    <output>
      <parameter name="row">signers_row</parameter>
    </output>
  </step>
  <step plugin="ConvertModule" action="GetCell" repeat="1">
    <input>
      <parameter name="table">[signers]</parameter>
      <parameter name="rowNumber">0</parameter>
      <parameter name="columnName">snp_template</parameter>
    </input>
    <output>
      <parameter name="value">snp_template</parameter>
    </output>
  </step>
  <step plugin="JSModule" action="JSRun" repeat="1">
    <input>
      <parameter name="script">result = [id_rent_type] != 1</parameter>
    </input>
    <output>
      <parameter name="result">condition</parameter>
    </output>
  </step>
  <step plugin="IOModule" action="IOIfCondititonToStep" repeat="1">
    <input>
      <parameter name="condition">[condition]</parameter>
      <parameter name="step">11</parameter>
    </input>
  </step>
  <step plugin="ReportModule" action="ReportSetTemplateFile" repeat="1">
    <input>
      <parameter name="fileName">\\nas\media$\ActivityManager\templates\registry\tenancy\order_commercial.odt</parameter>
    </input>
  </step>
  <step plugin="JSModule" action="JSRun" repeat="1">
    <input>
      <parameter name="script">result = [id_rent_type] != 2</parameter>
    </input>
    <output>
      <parameter name="result">condition</parameter>
    </output>
  </step>
  <step plugin="IOModule" action="IOIfCondititonToStep" repeat="1">
    <input>
      <parameter name="condition">[condition]</parameter>
      <parameter name="step">14</parameter>
    </input>
  </step>
  <step plugin="ReportModule" action="ReportSetTemplateFile" repeat="1">
    <input>
      <parameter name="fileName">\\nas\media$\ActivityManager\templates\registry\tenancy\order_special.odt</parameter>
    </input>
  </step>
  <step plugin="JSModule" action="JSRun" repeat="1">
    <input>
      <parameter name="script">result = [id_rent_type] != 3</parameter>
    </input>
    <output>
      <parameter name="result">condition</parameter>
    </output>
  </step>
  <step plugin="IOModule" action="IOIfCondititonToStep" repeat="1">
    <input>
      <parameter name="condition">[condition]</parameter>
      <parameter name="step">17</parameter>
    </input>
  </step>
  <step plugin="ReportModule" action="ReportSetTemplateFile" repeat="1">
    <input>
      <parameter name="fileName">\\nas\media$\ActivityManager\templates\registry\tenancy\order_social.odt</parameter>
    </input>
  </step>
  <step plugin="ConvertModule" action="ConvertNameCellToCase" repeat="1">
    <input>
      <parameter name="inRow">[signers_row]</parameter>
      <parameter name="column">chairman_snp</parameter>
      <parameter name="format">[snp_template]</parameter>
      <parameter name="textCase">Nominative</parameter>
    </input>
    <output>
      <parameter name="outRow">signers_row</parameter>
    </output>
  </step>
  <step plugin="ConvertModule" action="ConvertNameCellToCase" repeat="1">
    <input>
      <parameter name="inRow">[signers_row]</parameter>
      <parameter name="column">head_housing_dep_snp</parameter>
      <parameter name="format">[snp_template]</parameter>
      <parameter name="textCase">Nominative</parameter>
    </input>
    <output>
      <parameter name="outRow">signers_row</parameter>
    </output>
  </step>
  <step plugin="ConvertModule" action="ConvertNameCellToCase" repeat="1">
    <input>
      <parameter name="inRow">[signers_row]</parameter>
      <parameter name="column">head_housing_dep_surname_dative</parameter>
      <parameter name="format">ss</parameter>
      <parameter name="textCase">Dative</parameter>
    </input>
    <output>
      <parameter name="outRow">signers_row</parameter>
    </output>
  </step>
  <step plugin="ConvertModule" action="ConvertNameCellToCase" repeat="1">
    <input>
      <parameter name="inRow">[signers_row]</parameter>
      <parameter name="column">head_legal_dep_snp</parameter>
      <parameter name="format">[snp_template]</parameter>
      <parameter name="textCase">Nominative</parameter>
    </input>
    <output>
      <parameter name="outRow">signers_row</parameter>
    </output>
  </step>
  <step plugin="ConvertModule" action="ConvertNameCellToCase" repeat="1">
    <input>
      <parameter name="inRow">[signers_row]</parameter>
      <parameter name="column">executor_snp</parameter>
      <parameter name="format">[snp_template]</parameter>
      <parameter name="textCase">Nominative</parameter>
    </input>
    <output>
      <parameter name="outRow">signers_row</parameter>
    </output>
  </step>
  <step plugin="ConvertModule" action="ConvertDateTimeToString" repeat="1">
    <input>
      <parameter name="dateTime">[order_date_from]</parameter>
      <parameter name="format">yyyy</parameter>
      <parameter name="firstCapital">false</parameter>
    </input>
    <output>
      <parameter name="words">current_year</parameter>
    </output>
  </step>
  <step plugin="ReportModule" action="ReportSetTableValue" repeat="1">
    <input>
      <parameter name="table">[tenancy_processes]</parameter>
      <parameter name="xmlContractor">Row</parameter>
    </input>
  </step>
  <step plugin="ReportModule" action="ReportSetStringValues" repeat="1">
    <input>
      <parameter name="values">[signers_row]</parameter>
    </input>
  </step>
  <step plugin="ReportModule" action="ReportSetStringValue" repeat="1">
    <input>
      <parameter name="name">protocol_num</parameter>
      <parameter name="value">[protocol_num]</parameter>
    </input>
  </step>
  <step plugin="ReportModule" action="ReportSetStringValue" repeat="1">
    <input>
      <parameter name="name">protocol_date</parameter>
      <parameter name="value">[protocol_date]</parameter>
    </input>
  </step>
  <step plugin="ReportModule" action="ReportSetStringValue" repeat="1">
    <input>
      <parameter name="name">current_year</parameter>
      <parameter name="value">[current_year]</parameter>
    </input>
  </step>
  <step plugin="ReportModule" action="ReportGenerate" repeat="1">
    <output>
      <parameter name="fileName"></parameter>
    </output>
  </step>
  <step plugin="IOModule" action="IOOpenFile" repeat="1">
    <input>
      <parameter name="fileName">[fileName]</parameter>
      <parameter name="arguments"></parameter>
    </input>
  </step>
</activity>